#!/usr/bin/env python
import os
import sys
import requests
import argparse

hook_url = 'https://hooks.slack.com/services/{token}'.format


class EnvDefault(argparse.Action):
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)


def main():
    description = """
Send slack messages to a registered webhook.

Some examples:
    
    uptime | %(prog)s --pre -u status -i chipmunk --text "Current uptime"
    test ! -f afile && %(prog)s -u sysbot -m ".env file is missing from enviromnet" -l error
    """

    parser = argparse.ArgumentParser(description=description,formatter_class=argparse.RawTextHelpFormatter)

    message = parser.add_mutually_exclusive_group()
    message.add_argument('-m', '--message', help='A text message, url will be converted to links and you can use simple formatting.')
    message.add_argument('--infile', nargs='?', help='Send a file as the message, or use the stdin, Example: echo "hi" | %(prog)s',  type=argparse.FileType('r'), default=sys.stdin)
    
    icon = parser.add_mutually_exclusive_group()
    icon.add_argument('-i', '--icon-emoji', help='emoji to use as the icon for this message', dest='icon_emoji')
    icon.add_argument('--icon-url', help='URL to an image to use as the icon for this message', dest='icon_url')
    parser.add_argument('-v', '--verbose', help='Verbose mode', dest='verbose', action='count', default=0)
    parser.add_argument('--pre', '--preformatted', help='Format the message as a pre formatted string', dest='preformatted', action='store_true', default=False)
    parser.add_argument('--text', help='A text just bellow the title.')

    parser.add_argument('-l', '--level', help='Color to highlight the message', dest='color', choices=['info', 'success', 'warning', 'error'], default='info')
    parser.add_argument('-u', '--username', help='The name of the bot', dest='username')
    parser.add_argument('--token', action=EnvDefault, envvar='SLACK_WEBHOOK_PATH', help='Your Slack API token', dest='token')
    parser.add_argument('--channel', help='Channel name. Default: Webhook setup channel', dest='channel')
    parser.add_argument('--title', help='Message title', dest='title')

    options = parser.parse_args()

    payload = {"mrkdwn": True}

    if options.text:
        payload['text'] = options.text

    if options.icon_emoji:
        payload['icon_emoji'] = ':%s:' % options.icon_emoji
    else:
        payload['icon_url'] = options.icon_url

    if options.channel:
        payload['channel'] = options.channel

    if options.username:
        payload['username'] = options.username

    colors = {
        'info': '#5bc0de',
        'success': '#5cb85c',
        'warning': '#ec971f',
        'error': '#d9534f',
    }

    if options.message:
        text = options.message
    else:
        text = options.infile.read()

    if options.preformatted:
        text = '\n```%s```\n' % text

    message = {'text': text, "mrkdwn_in": ["text"]}
    message['color'] = colors[options.color]

    if options.title:
        message['title'] = options.title

    payload['attachments'] = [message]

    url = hook_url(token=options.token)
    response = requests.post(url, json=payload, headers={'Content-Type': 'application/json'})

    if options.verbose > 1:
        print('REQUEST: ', payload)
    if options.verbose > 0:
        print('RESPONSE: ', response.text)


if __name__ == '__main__':
    exit(main())
